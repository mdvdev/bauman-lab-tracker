openapi: 3.0.0
info:
  title: Lab Management System API
  description: Полная API спецификация с учетом всех требований безопасности
  version: 2.0.0
  contact:
    name: API Support
    email: nikita2102antonenkov@gmail.com

tags:
  - name: Auth
    description: Аутентификация и авторизация
  - name: Users
    description: Пользователи
  - name: Courses
    description: Курсы
  - name: Labs
    description: Лабораторные работы
  - name: Schedule
    description: Расписание (слоты) для записи
  - name: Submissions
    description: Очередь на сдачу лабораторной работы в данном слоте
  - name: Notifications
    description: Уведомления

paths:
  # Аутентификация
  /auth/register:
    post:
      tags: [Auth]
      summary: Регистрация нового пользователя (студента)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Неверные входные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalidData:
                  value:
                    error: "Validation failed"
                    details: ["Email must be valid"]
        '409':
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "User with this email already exists"

  /auth/login:
    post:
      tags: [Auth]
      summary: Вход в систему
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Invalid credentials"

  # Пользователи
  /users/me:
    get:
      tags: [Users]
      summary: Получить свой профиль
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Данные пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
    
    patch:
      tags: [Users]
      summary: Обновить свой профиль
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Профиль обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users:
    get:
      tags: [Users]
      summary: Получить список пользователей (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  # Курсы
  /courses:
    get:
      tags: [Courses]
      summary: Получить список доступных курсов
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список курсов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags: [Courses]
      summary: Создать новый курс (преподаватель)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseCreate'
      responses:
        '201':
          description: Курс создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /courses/{courseId}:
    get:
      tags: [Courses]
      summary: Получить информацию о курсе (участник курса)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/courseId'
      responses:
        '200':
          description: Данные курса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Доступ запрещен (не участник курса)
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      tags: [Courses]
      summary: Обновить курс (преподаватель курса)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/courseId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseUpdate'
      responses:
        '200':
          description: Курс обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Доступ запрещен (не преподаватель курса)
        '404':
          $ref: '#/components/responses/NotFound'

  /courses/{courseId}/students:
    get:
      tags: [Courses]
      summary: Получить список студентов данного курса
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/courseId'
      responses:
        '200':
          description: Список курсов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseStudent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Доступ запрещен (не студент курса)
        '404':
          $ref: '#/components/responses/NotFound'

  /courses/{courseId}/students/{userId}:
    patch:
      tags: [Courses]
      summary: Изменить статус студента в курсе (для преподавателя)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/courseId'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: Студент курса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseStudent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Доступ запрещен (не студент курса)
        '404':
          $ref: '#/components/responses/NotFound'

  # Лабораторные работы
  /courses/{courseId}/labs:
    get:
      tags: [Labs]
      summary: Получить список лабораторных работ (участник курса)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/courseId'
      responses:
        '200':
          description: Список работ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lab'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Доступ запрещен (не участник курса)
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      tags: [Labs]
      summary: Создать лабораторную работу (преподаватель курса)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/courseId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabCreate'
      responses:
        '201':
          description: Работа создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lab'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Доступ запрещен (не преподаватель курса)
        '404':
          $ref: '#/components/responses/NotFound'

  /courses/{courseId}/labs/{labId}:
    get:
      tags: [Labs]
      summary: Получить лабораторную работу (участник курса)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/courseId'
        - $ref: '#/components/parameters/labId'
      responses:
        '200':
          description: Данные работы
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lab'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Доступ запрещен (не участник курса)
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      tags: [Labs]
      summary: Обновить лабораторную работу (преподаватель курса)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/courseId'
        - $ref: '#/components/parameters/labId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabUpdate'
      responses:
        '200':
          description: Работа обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lab'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Доступ запрещен (не преподаватель курса)
        '404':
          $ref: '#/components/responses/NotFound'

  # Расписание слотов для сдачи
  /courses/{courseId}/slots:
    get:
      tags: [Schedule]
      summary: Получить доступные слоты для записи
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/courseId'
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date
            example: "2023-12-15"
      responses:
        '200':
          description: Список доступных слотов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Slot'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Доступ запрещен (не участник курса)

    post:
      tags: [Schedule]
      summary: Создать слот для записи (преподаватель)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/courseId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlotCreate'
      responses:
        '201':
          description: Слот создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slot'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Доступ запрещен (не преподаватель курса)

  # Записи на сдачу
  /courses/{courseId}/submissions:
    post:
      tags: [Submissions]
      summary: Записаться на сдачу лабораторной
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/courseId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmissionCreate'
      responses:
        '201':
          description: Запись создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
        '400':
          description: |
            Возможные ошибки:
            - В слоте нет мест
            - Лабораторная работа не принадлежит курсу
            - Попытка записать другого студента
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Failed to register for submission"
                details: ["The slot is full"]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Доступ запрещен (не студент курса)

    get:
      tags: [Submissions]
      summary: Получить свои записи на сдачу
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/courseId'
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, completed, cancelled, rejected, needs_revision, in_progress]
      responses:
        '200':
          description: Список записей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Submission'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Доступ запрещен (не студент курса)

  /courses/{courseId}/submissions/{submissionId}:
    delete:
      tags: [Submissions]
      summary: Отменить запись (студент или преподаватель)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/courseId'
        - name: submissionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Запись отменена
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Доступ запрещен (не автор записи или преподаватель)
        '404':
          $ref: '#/components/responses/NotFound'

  # Управление статусами лабораторных работ (для преподавателей)
  /courses/{courseId}/submissions/{submissionId}/status:
    patch:
      tags: [Submissions]
      summary: Изменить статус сдачи (доступно только преподавателю)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/courseId'
        - $ref: '#/components/parameters/submissionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [approved, rejected, needs_revision, in_progress]
                  example: "approved"
                score:
                  type: integer
                  minimum: 0
                  maximum: 100
                  example: 90
                comment:
                  type: string
                  example: "Хорошая работа, но есть замечания по оформлению"
              required: [status]
      responses:
        '200':
          description: Статус обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
        '400':
          description: |
            Возможные ошибки:
            - Некорректный статус
            - Некорректная оценка
            - Попытка изменить завершенную работу
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Доступ запрещен (не преподаватель курса)
        '404':
          $ref: '#/components/responses/NotFound'

  # Уведомления
  /notifications:
    get:
      tags: [Notifications]
      summary: Получить свои уведомления
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: unreadOnly
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Список уведомлений
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    example: 42
                  unreadCount:
                    type: integer
                    example: 3
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /notifications/read:
    patch:
      tags: [Notifications]
      summary: Пометить уведомления как прочитанные
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: |
                    Список ID уведомлений для пометки как прочитанные.
                    Игнорируется, если `markAllAsRead=true`.
                  example: ["3fa85f64-5717-4562-b3fc-2c963f66afa6"]
                markAllAsRead:
                  type: boolean
                  default: false
                  description: |
                    Если `true`, пометить ВСЕ непрочитанные уведомления пользователя как прочитанные.
                    Приоритетнее, чем параметр `ids`.
                  example: true
      responses:
        '204':
          description: Успешно обновлено
        '400':
          description: Некорректные ID уведомлений
        '401':
          description: Не авторизован

components:
  
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        Используйте JWT токен для авторизации.
        Пример: `Authorization: Bearer <token>`

  parameters:

    courseId:
      name: courseId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: ID курса
      example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"

    labId:
      name: labId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: ID лабораторной работы
      example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"

    userId:
      name: userId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: ID пользователя
      example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"

    submissionId:
      name: submissionId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"

  responses:
    Unauthorized:
      description: Не авторизован
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Authorization required"
            details: ["Missing or invalid token"]

    Forbidden:
      description: Доступ запрещен
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Forbidden"
            details: ["Insufficient permissions"]

    NotFound:
      description: Ресурс не найден
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Not found"
            details: ["Course not found"]

    BadRequest:
      description: Неверный запрос
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Bad request"
            details: ["Invalid queue mode"]

  schemas:

    # Пользователи
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        telegram:
          type: string
          nullable: true
          pattern: '^@[a-zA-Z0-9_]{5,32}$'
          example: "@username"
        role:
          type: string
          enum: [student, teacher, admin]
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        photo:
          type: string
          format: uri
          nullable: true
          example: "https://example.com/path/to/photo.jpg"
          

    UserRegister:
      type: object
      required: [email, password, firstName, lastName]
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          minLength: 8
          example: "securePassword123"
        firstName:
          type: string
          example: "Иван"
        lastName:
          type: string
          example: "Иванов"

    UserLogin:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "securePassword123"

    UserUpdate:
      type: object
      properties:
        firstName:
          type: string
          example: "Иван"
        lastName:
          type: string
          example: "Иванов"
        telegram:
          type: string
          pattern: '^@[a-zA-Z0-9_]{5,32}$'
          example: "@ivanov"
        password:
          type: string
          format: password
          minLength: 8
          example: "newPassword123"
        photo:
          type: string
          format: uri
          example: "https://example.com/path/to/photo.jpg"
      minProperties: 1
      additionalProperties: false

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'

    # Курсы
    Course:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          example: "Программная инженерия"
        description:
          type: string
          nullable: true
          example: "Основы программирования"
        teacherIds:
          type: array
          items:
            type: string
            format: uuid
          readOnly: true
        queueMode:
          type: string
          enum: [democratic, oligarchic, anarchic]
          example: "democratic"
        createdAt:
          type: string
          format: date-time
          readOnly: true
        photo:
          type: string
          format: uri
          nullable: true
          example: "https://example.com/path/to/photo.jpg"
          
    CourseCreate:
      type: object
      required: [name, queueMode]
      properties:
        name:
          type: string
          example: "Новый курс"
        description:
          type: string
          nullable: true
          example: "Описание курса"
        queueMode:
          type: string
          enum: [democratic, oligarchic, anarchic]
          example: "democratic"
        photo:
          type: string
          format: binary
          nullable: true
          description: "Фото курса в формате Base64"
          example: "/9j/4AAQSkZJRgABAQEAAAAAAAD/2wBDAAoHBwkICgsJEBwVGxwYHBwsJDh0dIy8sLC4qL3c3N0TCwD3AwtxgDsd0o4g73VWhu6KlgOS9JlAbxEq1eMeaGpDTKN7oPbPV0PfsEjChgT3JsbWoYG/pVREopVBAEPp7Z2FFPxl8="

    CourseUpdate:
      type: object
      properties:
        name:
          type: string
          example: "Обновленное название"
        description:
          type: string
          nullable: true
          example: "Новое описание"
        queueMode:
          type: string
          enum: [democratic, oligarchic, anarchic]
          example: "oligarchic"
        photo:
          type: string
          format: binary
          nullable: true
          description: "Фото курса в формате Base64"
          example: "/9j/4AAQSkZJRgABAQEAAAAAAAD/2wBDAAoHBwkICgsJEBwVGxwYHBwsJDh0dIy8sLC4qL3c3N0TCwD3AwtxgDsd0o4g73VWhu6KlgOS9JlAbxEq1eMeaGpDTKN7oPbPV0PfsEjChgT3JsbWoYG/pVREopVBAEPp7Z2FFPxl8="
      minProperties: 1
      additionalProperties: false
    
    CourseStudent:
      type: object
      properties:
        studentId:
          type: string
          format: uuid
          description: "Уникальный идентификатор студента"
        score:
          type: integer
          description: "Балл студента"
        enrollmentDate:
          type: string
          format: date-time
          description: "Дата регистрации студента на курс"
        status:
          type: string
          enum: [in_progress, completed, failed]
          description: "Статус студента в курсе"

    # Лабораторные работы
    Lab:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          example: "Лаб 1"
        description:
          type: string
          nullable: true
          example: "Основы работы с API"
        deadline:
          type: string
          format: date-time
          example: "2023-12-31T23:59:59Z"
        score:
          type: integer
          minimum: 0
          default: 100
          example: 100
        scoreAfterDeadline:
          type: integer
          minimum: 0
          default: 100
          example: 100
        courseId:
          type: string
          format: uuid
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true

    LabCreate:
      type: object
      required: [name, deadline]
      properties:
        name:
          type: string
          example: "Новая лабораторная"
        description:
          type: string
          nullable: true
          example: "Описание работы"
        deadline:
          type: string
          format: date-time
          example: "2023-12-31T23:59:59Z"
        score:
          type: integer
          minimum: 0
          default: 100
          example: 100
        scoreAfterDeadline:
          type: integer
          minimum: 0
          default: 100
          example: 100

    LabUpdate:
      type: object
      properties:
        name:
          type: string
          example: "Обновленное название"
        description:
          type: string
          nullable: true
          example: "Новое описание"
        deadline:
          type: string
          format: date-time
          example: "2023-12-31T23:59:59Z"
        score:
          type: integer
          minimum: 0
          example: 100
        scoreAfterDeadline:
          type: integer
          minimum: 0
          example: 100
      minProperties: 1
      additionalProperties: false

    # Слот для записи
    Slot:
      type: object
      properties:
        id:
          type: string
          format: uuid
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        maxStudents:
          type: integer
          minimum: 1
        currentStudents:
          type: integer
        teacherId:
          type: string
          format: uuid

    SlotCreate:
      type: object
      required: [startTime, endTime, maxStudents]
      properties:
        startTime:
          type: string
          format: date-time
          example: "2023-12-15T10:00:00Z"
        endTime:
          type: string
          format: date-time
          example: "2023-12-15T11:00:00Z"
        maxStudents:
          type: integer
          minimum: 1
          example: 5

    # Запись на сдачу
    Submission:
      type: object
      properties:
        id:
          type: string
          format: uuid
        slot:
          $ref: '#/components/schemas/Slot'
        lab:
          $ref: '#/components/schemas/Lab'
        student:
          $ref: '#/components/schemas/User'
        status:
          type: string
          enum: [pending, completed, cancelled, rejected, needs_revision, in_progress]
        createdAt:
          type: string
          format: date-time

    SubmissionCreate:
      type: object
      required: [slotId, labId]
      properties:
        slotId:
          type: string
          format: uuid
          description: ID слота для записи
        labId:
          type: string
          format: uuid
          description: ID лабораторной работы
        studentId:
          type: string
          format: uuid
          description: |
            Опционально, для преподавателей - запись студента.
            Если не указано - записывается текущий пользователь.

    # Уведомление
    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [informational, success, warning, error, system]
        title:
          type: string
          example: "Лабораторная работа проверена"
        message:
          type: string
          example: "Ваша работа 'Основы SQL' принята (оценка: 95/100)"
        isRead:
          type: boolean
        metadata:
          type: object
          properties:
            labId:
              type: string
              format: uuid
            courseId:
              type: string
              format: uuid
            submissionId:
              type: string
              format: uuid
        createdAt:
          type: string
          format: date-time

    # Ошибка
    Error:
      type: object
      properties:
        error:
          type: string
          example: "Validation error"
        details:
          type: array
          items:
            type: string
          example: ["Email is invalid", "Password too short"]